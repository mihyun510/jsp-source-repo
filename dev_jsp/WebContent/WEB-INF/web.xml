<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
	<context-param>
 		<param-name>log4jConfigLocation</param-name>
 		<param-value>/WEB-INF/classes/log4j.properties</param-value>
 	</context-param>
	<context-param>
 		<param-name>driver</param-name>
 		<param-value>oracle.jdbc.driver.OracleDriver</param-value>
 	</context-param>
	<context-param>
 		<param-name>user</param-name>
 		<param-value>scott</param-value>
 	</context-param>
<!-- 	<error-page>
 		<error-code>404</error-code>
 		<location>/error/error404.jsp</location> 서버로 에러페이지를 정해놓았기 때문에 개발도중에 에러메세지를 볼 수 없다. 이 페이지만 보이기 때문이다.
 	</error-page> -->
	<!-- <error-page>
 		<error-code>500</error-code>
 		<location>/error/error500.jsp</location>
 	</error-page> -->
 	<error-page>
 		<exception-type>java.lang.NullPointException</exception-type>
 		<location>/error/errorNullPointer.jsp</location>
 	</error-page>
 	<servlet>
 		<servlet-name>parameterServlet</servlet-name>
 		<servlet-class>jsp.ch03.ParameterServlet</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>parameterServlet</servlet-name>
 		<url-pattern>/ch03/parameterAction.do</url-pattern>
 	</servlet-mapping>
 	
 	<servlet>
 		<servlet-name>boardAction</servlet-name>
 		<servlet-class>ajax.board.BoardAction</servlet-class>
 		<init-param>
 			<param-name>mem_id</param-name>
 			<param-value>apple</param-value>
 		</init-param>
 		<init-param>
 			<param-name>mem_pw</param-name>
 			<param-value>123</param-value>
 		</init-param>
 		<!-- <load-on-startup></load-on-startup> 을 지정해주지 않는다면 자동으로 실행되는 것이 아니라 요청이 들어오면 처리가  됨 -->
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>boardAction</servlet-name>
 		<url-pattern>/ajax/board/boardAction.ajax</url-pattern>
 	</servlet-mapping>
 	
 	<servlet>
 		<servlet-name>mvcServlet</servlet-name>
 		<servlet-class>jsp.ch17.MVCServlet</servlet-class>
 	</servlet>
 	<servlet-mapping>
 		<servlet-name>mvcServlet</servlet-name>
 		<url-pattern>*.kosmo</url-pattern>
 	</servlet-mapping>
 	
	<servlet>
	<!-- 서블릿 네임으로 서블릿 클래스를 찾아갈수 있다. -->
		<servlet-name>helloServlet</servlet-name>
		<servlet-class>jsp.ch13.HelloServlet</servlet-class>
	</servlet>
	<servlet-mapping>
	<!-- url을 매핑시켜줘야지 servlet이 url을 가지고 실행이 가능해진다. 톰켓이 경로를 인식할 수 있게된다. -->
		<servlet-name>helloServlet</servlet-name>
		<url-pattern>/ch13/hello.do</url-pattern>
	</servlet-mapping>
	
<!-- 여러개의 서블릿 클래스를 매핑하는 것이 가능하다. 여기서 주의할 것은 여기서 오타가 나면 서버가 터져요.	-->
	<servlet>
		<servlet-name>frontServlet</servlet-name>
		<servlet-class>jsp.ch17.FrontServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>frontServlet</servlet-name>
		<url-pattern>/ch17/shopping2.do</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>orderServlet</servlet-name>
		<servlet-class>jsp.ch17.OrderServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>orderServlet</servlet-name>
		<url-pattern>/ch17/orderInsert.do</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>DBCPInit</servlet-name>
		<servlet-class>jsp.ch17.DBCPInitVer2</servlet-class>
		<!-- 디비에 필요한 정보들을 매핑해주어야된다. 초기화 느낌..? DBCPinit에서 제어역전이 필요하다. 그래야지 톰캣이 인식을 할 수있다.-->
		<init-param>
			<param-name>jdbcDriver</param-name>
			<param-value>oracle.jdbc.driver.OracleDriver</param-value>
		</init-param>
		<init-param>
			<param-name>jdbcUrl</param-name>
			<param-value>jdbc:oracle:thin:@192.168.0.23:1521:orcl11</param-value>
		</init-param>
		<init-param>
			<param-name>username</param-name>
			<param-value>scott</param-value>
		</init-param>
		<init-param>
			<param-name>pw</param-name>
			<param-value>tiger</param-value>
		</init-param>
		<init-param>
		<!-- 임의로 이름을 지정해서 가져가자 상수로 적혀있다. -->
			<param-name>poolName</param-name>
			<param-value>chap14</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
<!-- 	<servlet> 이와같이 입력수정삭제조회 이렇게 각각의 기능에 대해서 각각의 서블이 모두 존재하는 것은 매우 비효율 적이므로 한개의 서블릿에 if문으로 조건을 나누자. 
		<servlet-name>orderDelServlet2</servlet-name>
		<servlet-class>jsp.ch17.OrderDeleteServlet2</servlet-class> 여기서 OrderDeleteServlet2이 존재하지 않으면 ClassNotFoundException 404가 발생한다. nullpointexception이 발생하면 500번이 일어난다.
	</servlet>
	<servlet-mapping>
		<servlet-name>orderDelServlet2</servlet-name>
		<url-pattern>/ch17/orderDelete.do</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>orderUPDServlet2</servlet-name>
		<servlet-class>jsp.ch17.OrderUpdateServlet2</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>orderUPDServlet2</servlet-name>
		<url-pattern>/ch17/orderUpdate.do</url-pattern>
	</servlet-mapping> -->
</web-app>